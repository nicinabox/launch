#!/usr/bin/env ruby

require 'json'

class Launch
  def initialize(args)
    case args[0]
    when 'remove'
      remove(args[1])
    when 'add'
      add(args[1], args[2])
    when 'alias'
      add_alias(args[1], args[2])
    when /edit|init/
      open_config
    when /list|ls/
      all_services
    when /help|-h/
      list_commands
    when nil
      open_gateway
    else
      open(args[0])
    end
  end

  def config
    ENV['HOME'] ||= File.expand_path('~')
    @config ||= JSON.parse(File.read(launchrc))
  end

  def open_config
    unless File.exists?(launchrc)
      `touch #{launchrc}`
    end

   `open #{launchrc}`
  end

  def launchrc
    "#{ENV['HOME']}/.launchrc"
  end

  def list_commands
    commands = [
      'default - open gateway',
      'add NAME URL',
      'alias NAME SERVICE',
      'remove NAME',
      'list'
    ]
    puts commands.join("\n")
  end

  def all_services
    services = config['services']
    aliases  = config['aliases'].invert

    puts services.keys.map { |k|
      if aliases[k]
        "#{k} => #{aliases[k] }"
      else
        k
      end
    }.sort_by { |s| s }
  end

  def open(service)
    services = config['services']
    aliases  = config['aliases']

    service = aliases[service] if aliases.include? service
    url = services[service]

    unless url
      abort "Service not found. Try help."
    end

    url = if /^:/ =~ url
            "http://#{config['host']}#{url}"
          else
            "http://#{url}"
          end

    puts "Launching #{service} (#{url})"
    `open #{url}`
  end

  def open_gateway
    output = `netstat -nr | grep '^default'`
    gateway = /\d+.\d+.\d+.\d+/.match(output)
    `open http://#{gateway}`
  end

  def add(name, url)
    config['services'][name] = url
    File.open(launchrc, 'w') do |f|
      f.write JSON.pretty_generate(config)
    end
  end

  def add_alias(name, service)
    config['aliases'][service] = name
    File.open(launchrc, 'w') do |f|
      f.write JSON.pretty_generate(config)
    end
  end

  def remove(name)
    config['services'].delete(name)
    File.open(launchrc, 'w') do |f|
      f.write JSON.pretty_generate(config)
    end
  end
end

Launch.new ARGV
